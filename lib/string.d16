.global
_strcpy: ;r0 = dest r1 = src
	ld.b r2,[r1]
	st.b [r0],r2
	test r2,r2
	jmp.eq 1f
	add r0,1
	add r1,1
	jmp _strcpy
1:
	ret

.global
_strlen: ;ptr in r0
    mov r2, r0
1:
	ld.b r1,[r0]
	test r1,r1
	jmp.eq 2f
	add r0,1
	jmp 1b
2:
	sub r0,r2
	ret

.global
_memcpy: ;r0 - dest, r1 - source, r2 count
	push r0
	xor r3,r3
	or r3,r0
	or r3,r1
	or r3,r2
	test r3,1
	jmp.eq 2f
1:
	ld.b r3,[r1]
	st.b [r0],r3
	add r0,1
	add r1,1
	sub r2,1
	jmp.ne 1b
	pop r0
	ret
	
2:
	ld r3,[r1]
	st [r0],r3
	add r0,2
	add r1,2
	sub r2,2
	jmp.ne 2b
	pop r0
	ret

.global
_strcmp: ;str1 in r0, str1 in r1
	ld.b r2,[r0]
	ld.b r3,[r1]
	test r2,r2
	jmp.eq 1f
	add r0,1
	add r1,1
	cmp r2,r3
	jmp.eq _strcmp
	sub r2,r3
1:
mov r0,r2
ret

.global
_strchr:
	and r1,0xff
1:
	ld.b r2,[r0]
	test r2,r2
	jmp.eq 2f
	add r0,1
	cmp r2,r1
	jmp.ne 1b
	sub r0,1
2:
	ret
.global
_memset: ; r0 - dest, r1 - val, r2 - nbytes
	push r0
1:
	st.b [r0],r1
	add r0,1
	sub r2,1
	jmp.ne 1b
	pop r0
	ret

.global
_memchr: ;ptr in r0, char in r1, count in r2
	ld.b r3,[r0]
	add r0,1
	sub r2,1
	jmp.eq 1f
	cmp r3,r1
	jmp.ne _memchr
1:
	ret
.global
_memcmp: ;ptr1 in r0, ptr2 in r1, count in r2
	push r4	
1:
	ld.b r3,[r0]
	ld.b r4,[r1]
	sub r2,1
	jmp.n 2f
	add r0,1
	add r1,1
	cmp r3,r4
	jmp.eq 1b
	sub r3,r4
	mov r0,r3
	pop r4
	ret
2:
	mov r0,0
	pop r4
	ret

.global
_strcat: ;str1 in r0, str2 in r1
	push r0
1:
	ld.b r2,[r0]
	add r0,1
	test r2,r2
	jmp.ne 1b
	sub r0,1
2:
	ld.b r2,[r1]
	st.b [r0],r2
	add r0,1
	add r1,1
	test r2,r2
	jmp.ne 2b
	pop r0
	ret
