.global
_mul: ;takes 2 parameters
mov r3,r0
xor r0,r0
1:
	cmp r1,0
	jmp.eq 3f
	test r1,1
	jmp.eq 2f
	add r0,r3
2:
	shl r3,1
	shr r1,1
	cmp r1,0
	jmp 1b
3:
ret
.global
_mul2: ;takes 2 parameters
push r4
push r2
push r3
mov r3,r0
xor r0,r0
mov r2,r1
xor r1,r1
xor r4,r4
1:
	cmp r2,0
	jmp.eq 3f
	test r2,1
	jmp.eq 2f
	add r0,r3
    adc r1,r4
2:
	shl r3,1
    rcl r4,1
	shr r2,1
	cmp r2,0
	jmp 1b
3:
pop r3
pop r2
pop r4
ret
.global
_abs:
	cmp r0,0
	jmp.p 1f
	neg r0
1:
	ret
.global
_div: ; divide r0 by r1
        push r2
        push r3
		test r1,r1
		jmp.eq div_end
		xor r2,r2
		test r0,0x8000
		jmp.eq 1f
		xor r2,1
		neg r0
1:
		test r1,0x8000
		jmp.eq 1f
		xor r2,1
		neg r1
1:
		st [div_sign],r2


		mov r2,r1
		mov r1,r0
		xor r0,r0
		mov r3,1
div_start:
	cmp r1,r2
	jmp.l div_next
	shl r2,1
	shl r3,1
	jmp div_start

div_next:
	cmp r1,r2
	jmp.l 1f
	sub r1,r2
	add r0,r3
1:
	test r3,1
	jmp.ne div_end
	shr r3,1
	sar r2,1
	jmp div_next

div_end:
	ld r2,div_sign
	test r2,r2
	jmp.eq 1f
	neg r0
1:
    pop r3
    pop r2
	ret

div_sign: .dw 0
